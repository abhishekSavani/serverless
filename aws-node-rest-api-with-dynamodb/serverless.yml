service: serverless-rest-api-with-dynamodb

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-south-1
  profile: Serverless_test
  environment:
    DYNAMODB_TABLE: feedback
    DYNAMODB_TABLE_CONTACT: contact
    DYNAMODB_TABLE_USER: user
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      ##Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
     ### Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_CONTACT}"
      Resource:
        - { "Fn::GetAtt": ["FeedbackDynamoDbTable", "Arn"] } #you will also see the logical IDs below where they are provisioned
        - { "Fn::GetAtt": ["ContectDynamoDbTable", "Arn"] }
        - { "Fn::GetAtt": ["UserDynamoDbTable", "Arn"] }
functions:
  ## feedback
  create:
    handler: feedback/create.create
    events:
      - http:
          path: feedback
          method: post
          cors: true

  list:
    handler: feedback/list.list
    events:
      - http:
          path: feedback
          method: get
          cors: true

  get:
    handler: feedback/get.get
    events:
      - http:
          path: feedback/{id}
          method: get
          cors: true

  update:
    handler: feedback/update.update
    events:
      - http:
          path: feedback/{id}
          method: put
          cors: true

  delete:
    handler: feedback/delete.delete
    events:
      - http:
          path: feedback/{id}
          method: delete
          cors: true

  ## Contact

  createContact:
    handler: contact/create.createContact
    events:
      - http:
          path: contact
          method: post
          cors: true

  listContact:
    handler: contact/list.listContact
    events:
      - http:
          path: contact
          method: get
          cors: true

resources:
  Resources:
    FeedbackDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    
    ContectDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_CONTACT}

    UserDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_USER}